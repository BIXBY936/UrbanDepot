name: CI-CD pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Backend tests with Docker ---
      - name: Write serviceAccountKey.json from secret
        run: echo "$SERVICE_ACCOUNT_KEY_JSON" > backend/serviceAccountKey.json
        env:
          SERVICE_ACCOUNT_KEY_JSON: ${{ secrets.SERVICE_ACCOUNT_KEY_JSON }}

      - name: Build backend test image
        run: docker build --target test -t backend-test ./backend

    #   - name: Run backend unit tests
    #     run: docker run --rm backend-test

      # Optional: build runtime image and smoke-test the health endpoint
      - name: Build backend runtime image
        run: docker build -t backend-runtime ./backend

      - name: Start backend & smoke check
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
          RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
          REACT_APP_EMAILJS_SERVICE_ID: ${{ secrets.REACT_APP_EMAILJS_SERVICE_ID }}
          REACT_APP_EMAILJS_TEMPLATE_ID: ${{ secrets.REACT_APP_EMAILJS_TEMPLATE_ID }}
          REACT_APP_EMAILJS_USER_ID: ${{ secrets.REACT_APP_EMAILJS_USER_ID }}
          FIREBASE_TYPE: ${{ secrets.FIREBASE_TYPE }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}
          FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }} 

        run: |
          docker run -d --name backend \
            -p 8081:8080 \
            -e FIREBASE_PROJECT_ID \
            -e FIREBASE_PRIVATE_KEY \
            -e FIREBASE_CLIENT_EMAIL \
            -e RAZORPAY_KEY_ID \
            -e RAZORPAY_KEY_SECRET \
            backend-runtime
          # wait a moment for the server to start
          for i in {1..20}; do
            if curl -fsS http://localhost:8081/healthz; then
              exit 0
            fi
            sleep 1
          done
          echo "Backend failed health check" && docker logs backend && exit 1
      - name: Stop backend
        if: always()
        run: docker rm -f backend || true

      # --- Frontend build via Docker & basic check that it serves files ---
      - name: Build frontend image with build args
        run: |
          docker build \
            --build-arg REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}" \
            -t frontend-app .

      - name: Start frontend & smoke check
        run: |
            echo "Starting frontend container..."
            docker run -d --name frontend -p 8080:8080 frontend-app
            
            echo "Waiting for frontend to be ready..."
            for i in {1..30}; do
              if curl -fsS http://localhost:8080/health; then
                echo "Frontend health check passed"
                break
              fi
              echo "Attempt $i: Frontend not ready yet..."
              sleep 2
            done
            
            echo "Checking frontend container status..."
            docker ps -a | grep frontend || true
            
            echo "=== Docker logs for frontend ==="
            docker logs frontend || true
            
            echo "=== Checking if nginx is running ==="
            docker exec frontend ps aux || true
            
            echo "=== Checking if files are served ==="
            docker exec frontend ls -la /usr/share/nginx/html || true
            
            echo "=== Testing actual endpoint access ==="
            curl -v http://localhost:8080/health || true
            
            echo "=== Testing main page access ==="
            curl -v http://localhost:8080/ || true
            
            # Final health check
            if curl -fsS http://localhost:8080/health; then
              echo "Frontend is healthy"
            else
              echo "Frontend failed health check"
              exit 1
            fi
            
      - name: Stop frontend
        if: always()
        run: docker rm -f frontend || true

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy Frontend to Render
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}' \
            https://api.render.com/v1/services/${{ secrets.FRONTEND_SERVICE }}/deploys
    
      - name: Deploy Backend to Render
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}' \
            https://api.render.com/v1/services/${{ secrets.BACKEND_SERVICE }}/deploys
